@model RealEstateInvestment.Areas.RealEstate.Models.PaymentMethodDetail
@{
    Layout = null;
}
@using (Html.BeginForm("SavePaymentMethodHeaderDetail", "Payments", FormMethod.Post, new { id = "Form" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @if (Model != null && Model.Id > 0)
        {
            @Html.HiddenFor(model => model.Id)
        }
        @Html.HiddenFor(model => model.PaymentMethodHeaderId)

        <div class="form-group">
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.PaymentTypeId, ViewBag.PaymentTypes as SelectList, string.Empty, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.PaymentTypeId, "", new { @class = "text-danger" })
            </div>
            @Html.LabelFor(model => model.PaymentTypeId, htmlAttributes: new { @class = "control-label col-md-2" })
        </div>

        <div class="form-group" style="display:none;">
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsRatioNotAmount)
                    @Html.ValidationMessageFor(model => model.IsRatioNotAmount, "", new { @class = "text-danger" })
                </div>
            </div>
            @Html.LabelFor(model => model.IsRatioNotAmount, htmlAttributes: new { @class = "control-label col-md-2" })
        </div>

        <div class="form-group" id="RatioDiv">
            <div class="col-md-10">
                @Html.EditorFor(model => model.Ratio, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Ratio, "", new { @class = "text-danger" })
            </div>
            @Html.LabelFor(model => model.Ratio, htmlAttributes: new { @class = "control-label col-md-2" })
        </div>

        <div class="form-group" id="MinimumAmountDiv" style="display:none;">
            <div class="col-md-10">
                @Html.EditorFor(model => model.MinimumAmount, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MinimumAmount, "", new { @class = "text-danger" })
            </div>
            @Html.LabelFor(model => model.MinimumAmount, htmlAttributes: new { @class = "control-label col-md-2" })
        </div>

        <div class="form-group">
            <div class="col-md-10">
                @Html.EditorFor(model => model.StartFrom, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StartFrom, "", new { @class = "text-danger" })
            </div>
            @Html.LabelFor(model => model.StartFrom, htmlAttributes: new { @class = "control-label col-md-2" })
        </div>

        <div class="form-group">
            <div class="col-md-10">
                @Html.EditorFor(model => model.Period, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Period, "", new { @class = "text-danger" })
            </div>
            @Html.LabelFor(model => model.Period, htmlAttributes: new { @class = "control-label col-md-2" })
        </div>

        <div class="form-group">
            <div class="col-md-10">
                @Html.EditorFor(model => model.PaymentsCounts, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PaymentsCounts, "", new { @class = "text-danger" })
            </div>
            @Html.LabelFor(model => model.PaymentsCounts, htmlAttributes: new { @class = "control-label col-md-2" })
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="حفظ" class="btn btn-success" />
            </div>
        </div>
    </div>
}
<script>
    $(function () {
        $('#IsRatioNotAmount').prop('checked', true);
        var TotalYearPeriod =@ViewBag.TotalYearPeriod;

        //Edit Mode
        @if(Model!=null)
        {
            if(Model.Id>0)
            {
                if(Model.IsRatioNotAmount==true)
                {
                    @:$('#MinimumAmountDiv').hide();
                    @:$('#RatioDiv').show();
                }
            }
        }

        $('#IsRatioNotAmount').change(function () {
            var val = this.checked;
            if (val) {
                $('#MinimumAmount').val('');
                $('#MinimumAmountDiv').hide();
                $('#RatioDiv').show();
            } else {
                $('#Ratio').val('');
                $('#RatioDiv').hide();
                $('#MinimumAmountDiv').show();
            }
        });

        $('#Period').keyup(function (e) {
            var periodVal = this.value;
            $('#PaymentsCounts').val((TotalYearPeriod * 12) / periodVal);
        });

    });
</script>