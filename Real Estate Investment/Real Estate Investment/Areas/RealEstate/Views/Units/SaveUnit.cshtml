@model RealEstateInvestment.Areas.RealEstate.Models.Unit
@{
    Layout = null;
}
<div class="panel panel-primary">
    <div class="panel-heading">
        اضافة وحدات جديدة
    </div>
    <div class="panel-body">

        @using (Html.BeginForm("AddUnit", "Units", FormMethod.Post, new { id = "popupForm" }))
        {
            @Html.AntiForgeryToken()
            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.ProjectId)
                @*  *@
                <div class="form-group">
                    <div class="col-md-4">
                        <input type="radio" name="isParentUnit" value="false" /> وحدة فرعية
                    </div>
                    <div class="col-md-4">
                        <input type="radio" name="isParentUnit" value="true" checked /> وحدة رئيسية
                    </div>
                    <div class="col-md-4">
                    </div>
                </div>
                @*  *@
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.DropDownList("ProjectUnitTypeId", ViewBag.projectUnitTypes as SelectList, string.Empty, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ProjectUnitTypeId, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.ProjectUnitTypeId, htmlAttributes: new { @class = "control-label col-md-2" })
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.UnitName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.UnitName, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.UnitName, htmlAttributes: new { @class = "control-label col-md-2" })
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.TotalMeters, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.TotalMeters, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.TotalMeters, htmlAttributes: new { @class = "control-label col-md-2" })
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.NetPrice, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.NetPrice, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.NetPrice, htmlAttributes: new { @class = "control-label col-md-2" })
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.TotalPrice, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.TotalPrice, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.TotalPrice, htmlAttributes: new { @class = "control-label col-md-2" })
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.MeterPrice, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.MeterPrice, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.MeterPrice, htmlAttributes: new { @class = "control-label col-md-2" })
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.Garage)
                            @Html.ValidationMessageFor(model => model.Garage, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    @Html.LabelFor(model => model.Garage, htmlAttributes: new { @class = "control-label col-md-2" })
                </div>

                <div class="form-group GarageDivs" style="display:none">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.GarageMetes, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.GarageMetes, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.GarageMetes, htmlAttributes: new { @class = "control-label col-md-2" })
                </div>

                <div class="form-group GarageDivs" style="display:none">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.GaragePrice, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.GaragePrice, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.GaragePrice, htmlAttributes: new { @class = "control-label col-md-2" })
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.DropDownListFor(model => model.Perecent, ViewBag.nullDropDownList as SelectList, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Perecent, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    @Html.LabelFor(model => model.Perecent, htmlAttributes: new { @class = "control-label col-md-2" })
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.MaintenanceDeposit, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.MaintenanceDeposit, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.MaintenanceDeposit, htmlAttributes: new { @class = "control-label col-md-2" })
                </div>

                <div class="form-group" id="ParentId" style="display:none">
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.MainUnitId, ViewBag.ParentsUnits as SelectList, string.Empty, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.MainUnitId, "", new { @class = "text-danger", id = "MainUnitIdValidation" })
                    </div>
                    @Html.LabelFor(model => model.MainUnitId, htmlAttributes: new { @class = "control-label col-md-2" })
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.StatusId, ViewBag.Statuses as SelectList, String.Empty, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.StatusId, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.StatusId, htmlAttributes: new { @class = "control-label col-md-2" })
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.UnitContractAddress, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.UnitContractAddress, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.UnitContractAddress, htmlAttributes: new { @class = "control-label col-md-2" })
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.DocHeaderId, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DocHeaderId, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.DocHeaderId, htmlAttributes: new { @class = "control-label col-md-2" })
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="حفظ" class="btn btn-success" />
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<script>
    $(function () {
        $('input[type=radio][name=isParentUnit]').change(function () {
            var list = null;
            if (this.value == 'true') {
                $('#ParentId').hide();
                $('#MainUnitId').val('');
                $.get('/RealEstate/Units/GetUnitTypesByIsParent?isParentUnit=' + true + '&ProjectId=' + $('#ProjectId').val()+'', function (response) {
                    $('#ProjectUnitTypeId').empty().append('<option></option>');
                    $.each(response, function (index, element) {
                        $('#ProjectUnitTypeId').append('<option value=' + element.Id + '>' + element.ProjectUnitTypeName + '</option>');
                    });
                });
            }
            else if (this.value == 'false') {
                $('#ParentId').show();
                $.get('/RealEstate/Units/GetUnitTypesByIsParent?isParentUnit=' + false + '&ProjectId=' + $('#ProjectId').val() +'', function (response) {
                    $('#ProjectUnitTypeId').empty().append('<option></option>');
                    $.each(response, function (index, element) {
                        $('#ProjectUnitTypeId').append('<option value=' + element.Id + '>' + element.ProjectUnitTypeName + '</option>');
                    });
                });
            }
        });

        $("#Garage").change(function () {
            var val = this.checked;
            if (val) {
                $(".GarageDivs").show();
            } else {
                $(".GarageDivs *").val('');
                $(".GarageDivs").hide();
            }
        });

        $('#NetPrice').keyup(function (e) {
            var NetPriceVal = this.value;
            var TotalMeters = $('#TotalMeters').val();
            $('#MeterPrice').val(Math.trunc(NetPriceVal / TotalMeters));
        });

        $('#TotalMeters').keyup(function (e) {
            var TotalMeters = this.value;
            var NetPriceVal = $('#NetPrice').val();
            $('#MeterPrice').val(Math.trunc(NetPriceVal / TotalMeters));
        });

        $('#popupForm').submit(function (e) {
            var isparentval = $('input[type=radio][name=isParentUnit]:checked').val();
            if (isparentval == 'false' && $('#MainUnitId').val() == '') {
                $('#MainUnitIdValidation').text("من فضلك اختر الوحدة الرئيسية");
                return false;
            }
        });

    });
</script>